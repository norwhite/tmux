/*
Copyright (c) 2017 Jens Stimpfle

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/


/*
 * WARNING:
 *
 * This file was autogenerated with gen-macros.py from files under templates/
 *
 */


#ifndef RB3_GEN_HEADER
#define RB3_GEN_HEADER


/*
 * This is the stuff the user wants to use
 */
#define RB3_GEN_STRUCTS(BASENAME)  \
    RB3_GEN_STRUCTS_REAL(BASENAME##_head, BASENAME##_tree)

#define RB3_GEN_INLINE(BASENAME, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD)  \
    RB3_GEN_INLINE_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree)
#define RB3_GEN_INLINE_PROTO(BASENAME, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD)  \
    RB3_GEN_INLINE_PROTO_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree)

#define RB3_GEN_NODECMP(BASENAME, SUFFIX, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE)  \
    RB3_GEN_NODECMP_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree, BASENAME##_nodecmp##SUFFIX, BASENAME##_find_in_subtree##SUFFIX, BASENAME##_find_parent_in_subtree##SUFFIX, BASENAME##_delete_in_subtree##SUFFIX, BASENAME##_insert_in_subtree##SUFFIX, BASENAME##_find##SUFFIX, BASENAME##_delete##SUFFIX, BASENAME##_insert##SUFFIX)
#define RB3_GEN_NODECMP_PROTO(BASENAME, SUFFIX, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE)  \
    RB3_GEN_NODECMP_PROTO_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree, BASENAME##_nodecmp##SUFFIX, BASENAME##_find_in_subtree##SUFFIX, BASENAME##_find_parent_in_subtree##SUFFIX, BASENAME##_delete_in_subtree##SUFFIX, BASENAME##_insert_in_subtree##SUFFIX, BASENAME##_find##SUFFIX, BASENAME##_delete##SUFFIX, BASENAME##_insert##SUFFIX)

#define RB3_GEN_DATACMP(BASENAME, SUFFIX, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE)  \
    RB3_GEN_DATACMP_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree, BASENAME##_nodecmp##SUFFIX, BASENAME##_find_in_subtree##SUFFIX, BASENAME##_find_parent_in_subtree##SUFFIX, BASENAME##_delete_in_subtree##SUFFIX, BASENAME##_insert_in_subtree##SUFFIX, BASENAME##_find##SUFFIX, BASENAME##_delete##SUFFIX, BASENAME##_insert##SUFFIX)
#define RB3_GEN_DATACMP_PROTO(BASENAME, SUFFIX, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE)  \
    RB3_GEN_DATACMP_PROTO_REAL(struct BASENAME##_head, struct BASENAME##_tree, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, BASENAME##_get_head, BASENAME##_get_node, BASENAME##_inner_head, BASENAME##_outer_head, BASENAME##_inner_tree, BASENAME##_outer_tree, BASENAME##_init, BASENAME##_exit, BASENAME##_isempty, BASENAME##_get_min, BASENAME##_get_max, BASENAME##_get_prev, BASENAME##_get_next, BASENAME##_get_root, BASENAME##_has_child, BASENAME##_get_child, BASENAME##_get_parent, BASENAME##_get_prev_ancestor, BASENAME##_get_next_ancestor, BASENAME##_get_prev_descendant, BASENAME##_get_next_descendant, BASENAME##_insert_below, BASENAME##_delete_head, BASENAME##_get_parent_dir, BASENAME##_get_base, BASENAME##_get_containing_tree, BASENAME##_nodecmp##SUFFIX, BASENAME##_find_in_subtree##SUFFIX, BASENAME##_find_parent_in_subtree##SUFFIX, BASENAME##_delete_in_subtree##SUFFIX, BASENAME##_insert_in_subtree##SUFFIX, BASENAME##_find##SUFFIX, BASENAME##_delete##SUFFIX, BASENAME##_insert##SUFFIX)


#define RB3_FOREACH(BASENAME, TREE, NODE) \
    for (NODE = BASENAME##_get_min(TREE); \
        !!NODE; NODE = BASENAME##_get_next(NODE))

#define RB3_FOREACH_SAFE(BASENAME, TREE, NODE, NODE1) \
    for (NODE = BASENAME##_get_min(TREE); \
        (!!NODE ? (NODE1 = BASENAME##_get_next(NODE), !!NODE) : !!NODE); \
        NODE = NODE1)

/* (END stuff) */

#define RB3_GEN_STRUCTS_REAL(OUTER_HEAD_STRUCT_NAME, OUTER_TREE_STRUCT_NAME)  \
struct OUTER_HEAD_STRUCT_NAME {   \
        struct rb3_head head;     \
};                                \
                                  \
struct OUTER_TREE_STRUCT_NAME {   \
        struct rb3_tree tree;     \
};

#define RB3_GEN_INLINE_PROTO_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree)  \
RB3_API_STATIC_INLINE                                                 \
struct rb3_head *GET_HEAD(NODE_TYPE *node)                            \
{                                                                     \
	return &HEAD_FROM_NODE(node)->head;                                  \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *GET_NODE(struct rb3_head *head)                            \
{                                                                     \
	if (head)                                                            \
	        return NODE_FROM_HEAD((OUTER_HEAD_TYPE *) head);             \
	return (NODE_TYPE *) 0;                                              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
struct rb3_tree *INNER_TREE(OUTER_TREE_TYPE *tree)                    \
{                                                                     \
        return (struct rb3_tree *) tree;                              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
OUTER_TREE_TYPE *OUTER_TREE(struct rb3_tree *tree)                    \
{                                                                     \
        return (OUTER_TREE_TYPE *) tree;                              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
void init(OUTER_TREE_TYPE *tree)                                      \
{                                                                     \
        rb3_init(INNER_TREE(tree));                                   \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
void exit(OUTER_TREE_TYPE *tree)                                      \
{                                                                     \
        rb3_exit(INNER_TREE(tree));                                   \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
int isempty(OUTER_TREE_TYPE *tree)                                    \
{                                                                     \
        return rb3_isempty(INNER_TREE(tree));                         \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_min(OUTER_TREE_TYPE *tree)                             \
{                                                                     \
        return GET_NODE(rb3_get_min(INNER_TREE(tree)));               \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_max(OUTER_TREE_TYPE *tree)                             \
{                                                                     \
        return GET_NODE(rb3_get_max(INNER_TREE(tree)));               \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_prev(NODE_TYPE *node)                                  \
{                                                                     \
        return GET_NODE(rb3_get_prev(GET_HEAD(node)));                \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_next(NODE_TYPE *node)                                  \
{                                                                     \
        return GET_NODE(rb3_get_next(GET_HEAD(node)));                \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_root(OUTER_TREE_TYPE *tree)                            \
{                                                                     \
        return GET_NODE(rb3_get_root(INNER_TREE(tree)));              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
int has_child(NODE_TYPE *node, int dir)                               \
{                                                                     \
        return rb3_has_child(GET_HEAD(node), dir);                    \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_child(NODE_TYPE *node, int dir)                        \
{                                                                     \
        return GET_NODE(rb3_get_child(GET_HEAD(node), dir));          \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_parent(NODE_TYPE *node)                                \
{                                                                     \
        return GET_NODE(rb3_get_parent(GET_HEAD(node)));              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_prev_ancestor(NODE_TYPE *node)                         \
{                                                                     \
        return GET_NODE(rb3_get_prev_ancestor(GET_HEAD(node)));       \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_next_ancestor(NODE_TYPE *node)                         \
{                                                                     \
        return GET_NODE(rb3_get_next_ancestor(GET_HEAD(node)));       \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_prev_descendant(NODE_TYPE *node)                       \
{                                                                     \
        return GET_NODE(rb3_get_prev_descendant(GET_HEAD(node)));     \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_next_descendant(NODE_TYPE *node)                       \
{                                                                     \
        return GET_NODE(rb3_get_next_descendant(GET_HEAD(node)));     \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
void insert_below(NODE_TYPE *node, NODE_TYPE *parent, int dir)        \
{                                                                     \
        rb3_insert_below(GET_HEAD(node), GET_HEAD(parent), dir);      \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
void delete_head(NODE_TYPE *node)                                     \
{                                                                     \
        rb3_delete_head(GET_HEAD(node));                              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
int get_parent_dir(NODE_TYPE *node)                                   \
{                                                                     \
        return rb3_get_parent_dir(GET_HEAD(node));                    \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
NODE_TYPE *get_base(OUTER_TREE_TYPE *tree)                            \
{                                                                     \
        return GET_NODE(rb3_get_base(INNER_TREE(tree)));              \
}                                                                     \
                                                                      \
RB3_API_STATIC_INLINE                                                 \
OUTER_TREE_TYPE *get_containing_tree(NODE_TYPE *node)                 \
{                                                                     \
        return OUTER_TREE(rb3_get_containing_tree(GET_HEAD(node)));   \
}

#define RB3_GEN_NODECMP_PROTO_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree, nodecmp, find_in_subtree, find_parent_in_subtree, delete_in_subtree, insert_in_subtree, find, delete, insert)  \
RB3_API                                                                                                                 \
NODE_TYPE *find_in_subtree(NODE_TYPE *subtree, NODE_TYPE *node);                                                        \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *find_parent_in_subtree(NODE_TYPE *parent, int dir, NODE_TYPE *node, NODE_TYPE **parent_out, int *dir_out);   \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *delete_in_subtree(NODE_TYPE *node, NODE_TYPE *subtree);                                                      \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *insert_in_subtree(NODE_TYPE *node, NODE_TYPE *parent, int dir);                                              \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *find(OUTER_TREE_TYPE *tree, NODE_TYPE *node);                                                                \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *delete(NODE_TYPE *node, OUTER_TREE_TYPE *tree);                                                              \
                                                                                                                        \
RB3_API                                                                                                                 \
NODE_TYPE *insert(NODE_TYPE *node, OUTER_TREE_TYPE *tree);

#define RB3_GEN_DATACMP_PROTO_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree, nodecmp, find_in_subtree, find_parent_in_subtree, delete_in_subtree, insert_in_subtree, find, delete, insert)  \
RB3_API_STATIC_INLINE                                                                                                                         \
int headcmp(OUTER_HEAD *head, COMPARE_TYPE *data);                                                                                            \
                                                                                                                                              \
RB3_API RB3_NEVERINLINE                                                                                                                       \
OUTER_HEAD_TYPE *find_in_subtree(OUTER_HEAD_TYPE *subtree, COMPARE_TYPE *cdata);                                                              \
                                                                                                                                              \
RB3_API RB3_NEVERINLINE                                                                                                                       \
OUTER_HEAD_TYPE *find_parent_in_subtree(OUTER_HEAD_TYPE *parent, int dir, COMPARE_TYPE *cdata, OUTER_HEAD_TYPE **parent_out, int *dir_out);   \
                                                                                                                                              \
RB3_API RB3_NEVERINLINE                                                                                                                       \
OUTER_HEAD_TYPE *delete_in_subtree(COMPARE_TYPE *cdata, OUTER_HEAD_TYPE *subtree);                                                            \
                                                                                                                                              \
RB3_API RB3_NEVERINLINE                                                                                                                       \
OUTER_HEAD_TYPE *insert_in_subtree(OUTER_HEAD_TYPE *head, OUTER_HEAD_TYPE *parent, int dir, COMPARE_TYPE *cdata);                             \
                                                                                                                                              \
RB3_API_INLINE                                                                                                                                \
OUTER_HEAD_TYPE *find(OUTER_TREE_TYPE *tree, COMPARE_TYPE *cdata);                                                                            \
                                                                                                                                              \
RB3_API_INLINE                                                                                                                                \
OUTER_HEAD_TYPE *delete(COMPARE_TYPE *cdata, OUTER_TREE_TYPE *tree);                                                                          \
                                                                                                                                              \
RB3_API_INLINE                                                                                                                                \
OUTER_HEAD_TYPE *insert(NODE_TYPE *node, OUTER_TREE_TYPE *tree, COMPARE_TYPE *cdata);

#define RB3_GEN_INLINE_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree)  \
/* quite an empty file, but something must be here */

#define RB3_GEN_NODECMP_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree, nodecmp, find_in_subtree, find_parent_in_subtree, delete_in_subtree, insert_in_subtree, find, delete, insert)  \
RB3_API_STATIC_INLINE                                                                                                          \
int nodecmp(struct rb3_head *a, struct rb3_head *b)                                                                            \
{                                                                                                                              \
        return COMPARE_NODE(GET_NODE(a), GET_NODE(b));                                                                         \
}                                                                                                                              \
                                                                                                                               \
RB3_API RB3_NEVERINLINE                                                                                                        \
NODE_TYPE *find_in_subtree(NODE_TYPE *subtree, NODE_TYPE *node)                                                                \
{                                                                                                                              \
	if (!subtree)                                                                                                                 \
		return (NODE_TYPE *) 0;                                                                                                      \
        return GET_NODE(rb3_INLINE_find_in_subtree(GET_HEAD(subtree), (rb3_datacmp) nodecmp, GET_HEAD(node)));                 \
}                                                                                                                              \
                                                                                                                               \
RB3_API RB3_NEVERINLINE                                                                                                        \
NODE_TYPE *find_parent_in_subtree(NODE_TYPE *parent, int dir, NODE_TYPE *node, NODE_TYPE **parent_out, int *dir_out)           \
{                                                                                                                              \
        struct rb3_head *found;                                                                                                \
        struct rb3_head *pnt;                                                                                                  \
                                                                                                                               \
        found = rb3_INLINE_find_parent_in_subtree(GET_HEAD(parent), dir, (rb3_datacmp) nodecmp, GET_HEAD(node), &pnt, &dir);   \
        if (found)                                                                                                             \
                return GET_NODE(found);                                                                                        \
        *parent_out = GET_NODE(pnt);                                                                                           \
        *dir_out = dir;                                                                                                        \
        return (NODE_TYPE *) 0;                                                                                                \
}                                                                                                                              \
                                                                                                                               \
RB3_API RB3_NEVERINLINE                                                                                                        \
NODE_TYPE *delete_in_subtree(NODE_TYPE *node, NODE_TYPE *subtree)                                                              \
{                                                                                                                              \
        NODE_TYPE *found;                                                                                                      \
                                                                                                                               \
        found = find_in_subtree(subtree, node);                                                                                \
        if (found)                                                                                                             \
                rb3_delete_head(GET_HEAD(found));                                                                              \
	return found;                                                                                                                 \
}                                                                                                                              \
                                                                                                                               \
RB3_API RB3_NEVERINLINE                                                                                                        \
NODE_TYPE *insert_in_subtree(NODE_TYPE *node, NODE_TYPE *parent, int dir)                                                      \
{                                                                                                                              \
        NODE_TYPE *found;                                                                                                      \
                                                                                                                               \
        found = find_parent_in_subtree(parent, dir, node, &parent, &dir);                                                      \
        if (!found)                                                                                                            \
		rb3_insert_below(GET_HEAD(node), GET_HEAD(parent), dir);                                                                     \
        return found;                                                                                                          \
}                                                                                                                              \
                                                                                                                               \
RB3_API                                                                                                                        \
NODE_TYPE *find(OUTER_TREE_TYPE *tree, NODE_TYPE *node)                                                                        \
{                                                                                                                              \
	return find_in_subtree(get_root(tree), node);                                                                                 \
}                                                                                                                              \
                                                                                                                               \
RB3_API                                                                                                                        \
NODE_TYPE *delete(NODE_TYPE *node, OUTER_TREE_TYPE *tree)                                                                      \
{                                                                                                                              \
	return delete_in_subtree(node, get_root(tree));                                                                               \
}                                                                                                                              \
                                                                                                                               \
RB3_API                                                                                                                        \
NODE_TYPE *insert(NODE_TYPE *node, OUTER_TREE_TYPE *tree)                                                                      \
{                                                                                                                              \
        return insert_in_subtree(node, get_base(tree), RB3_LEFT);                                                              \
}

#define RB3_GEN_DATACMP_REAL(OUTER_HEAD_TYPE, OUTER_TREE_TYPE, NODE_TYPE, HEAD_FROM_NODE, NODE_FROM_HEAD, COMPARE_NODE, GET_HEAD, GET_NODE, INNER_HEAD, OUTER_HEAD, INNER_TREE, OUTER_TREE, init, exit, isempty, get_min, get_max, get_prev, get_next, get_root, has_child, get_child, get_parent, get_prev_ancestor, get_next_ancestor, get_prev_descendant, get_next_descendant, insert_below, delete_head, get_parent_dir, get_base, get_containing_tree, nodecmp, find_in_subtree, find_parent_in_subtree, delete_in_subtree, insert_in_subtree, find, delete, insert)  \
RB3_API_STATIC_INLINE                                                                                                                        \
int headcmp(OUTER_HEAD *head, COMPARE_TYPE *data)                                                                                            \
{                                                                                                                                            \
        return COMPARE_DATA(head, data);                                                                                                     \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API RB3_NEVERINLINE                                                                                                                      \
OUTER_HEAD_TYPE *find_in_subtree(OUTER_HEAD_TYPE *subtree, COMPARE_TYPE *cdata)                                                              \
{                                                                                                                                            \
        return rb3_INLINE_find_in_subtree(INNER_HEAD(head), headcmp, cdata));                                                                \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API RB3_NEVERINLINE                                                                                                                      \
OUTER_HEAD_TYPE *find_parent_in_subtree(OUTER_HEAD_TYPE *parent, int dir, COMPARE_TYPE *cdata, OUTER_HEAD_TYPE **parent_out, int *dir_out)   \
{                                                                                                                                            \
        struct rb3_head *found;                                                                                                              \
        struct rb3_head *parent;                                                                                                             \
        int dir;                                                                                                                             \
                                                                                                                                             \
        found = rb3_INLINE_find_parent_in_subtree(INNER_HEAD(parent), dir, headcmp, cdata, &parent, &dir);                                   \
        if (found)                                                                                                                           \
                return OUTER_HEAD(found);                                                                                                    \
        *parent_out = OUTER_HEAD(parent);                                                                                                    \
        *dir_out = dir;                                                                                                                      \
        return (OUTER_HEAD_TYPE *) 0;                                                                                                        \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API RB3_NEVERINLINE                                                                                                                      \
OUTER_HEAD_TYPE *delete_in_subtree(COMPARE_TYPE *cdata, OUTER_HEAD_TYPE *subtree)                                                            \
{                                                                                                                                            \
        OUTER_HEAD_TYPE *found;                                                                                                              \
                                                                                                                                             \
        found = find_in_subtree(INNER_TREE(tree), cdata);                                                                                    \
        if (found) {                                                                                                                         \
                rb3_delete_head(INNER_HEAD(found));                                                                                          \
                return found;                                                                                                                \
        }                                                                                                                                    \
        return (OUTER_HEAD_TYPE *) 0;                                                                                                        \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API RB3_NEVERINLINE                                                                                                                      \
OUTER_HEAD_TYPE *insert_in_subtree(OUTER_HEAD_TYPE *head, OUTER_HEAD_TYPE *parent, int dir, COMPARE_TYPE *cdata)                             \
{                                                                                                                                            \
        OUTER_HEAD_TYPE *found;                                                                                                              \
                                                                                                                                             \
        found = find_parent_in_subtree(parent, dir, cdata, &parent, &dir);                                                                   \
        if (found)                                                                                                                           \
                return found;                                                                                                                \
        rb3_insert_below(INNER_HEAD(head), INNER_HEAD(parent), dir);                                                                         \
        return (OUTER_HEAD_TYPE *) 0;                                                                                                        \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API_INLINE                                                                                                                               \
OUTER_HEAD_TYPE *find(OUTER_TREE_TYPE *tree, COMPARE_TYPE *cdata)                                                                            \
{                                                                                                                                            \
        return find_in_subtree(get_root(tree), cdata);                                                                                       \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API_INLINE                                                                                                                               \
OUTER_HEAD_TYPE *delete(COMPARE_TYPE *cdata, OUTER_TREE_TYPE *tree)                                                                          \
{                                                                                                                                            \
        return delete_in_subtree(cdata, get_root(tree));                                                                                     \
}                                                                                                                                            \
                                                                                                                                             \
RB3_API_INLINE                                                                                                                               \
OUTER_HEAD_TYPE *insert(NODE_TYPE *node, OUTER_TREE_TYPE *tree, COMPARE_TYPE *cdata)                                                         \
{                                                                                                                                            \
        return insert_in_subtree(GET_HEAD(node), get_base(tree), RB3_LEFT, cdata);                                                           \
}


#endif  /* RB3_GEN_HEADER */
